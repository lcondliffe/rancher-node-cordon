---
- name: Rancher API - Get node detail
  uri:
    method: GET
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    body_format: json
    url: https://{{ rancher_host }}/v3/nodes
  register: node

- name: Query API result for node ID
  set_fact: node_id={{ node | json_query(query) }}
  vars:
    query: "json.data[?nodeName=='{{ rancher_node_name }}'] | [0].id"

- name: Rancher API - Retrieve node detail
  uri:
    method: GET
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    body_format: json
    url: https://{{ rancher_host }}/v3/nodes/{{ node_id }}
  register: node_detail

- name: Show current node state
  debug:
    var: node_detail.json.state

- name: Show available node actions
  debug:
    var: node_detail.json.actions

- name: Rancher API - Cordon node
  uri:
    method: POST
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    url: "{{ node_detail.json.actions.cordon }}"
  register: cordon_result
  changed_when: cordon_result.status == 200
  when: (rancher_node_cordon == "cordoned") and (node_detail.json.actions["cordon"] is defined)

- name: Rancher API - Drain node
  uri:
    method: POST
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    url: "{{ node_detail.json.actions.drain }}"
    body_format: json
    body:
      deleteLocalData: true
      force: false
      ignoreDaemonSets: null
      timeout: 120
  register: drain_result
  changed_when: drain_result.status == 200
  when: rancher_node_cordon == "drained" and (node_detail.json.actions["drain"] is defined)

- name: Rancher API - Uncordon node
  uri:
    method: POST
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    url: "{{ node_detail.json.actions.uncordon }}"
  register: uncordon_result
  changed_when: uncordon_result.status == 200
  when: rancher_node_cordon == "active" and (node_detail.json.actions["uncordon"] is defined)

- name: Rancher API - Wait for node status
  uri:
    method: GET
    user: "{{ rancher_user }}"
    password: "{{ rancher_password }}"
    force_basic_auth: yes
    body_format: json
    url: https://{{ rancher_host }}/v3/nodes/{{ node_id }}
  register: node_detail
  until: node_detail.json.state == rancher_node_cordon
  retries: 10

- name: Show current node state
  debug:
    var: node_detail.json.state

- name: Show cordon result
  debug:
    var: cordon_result
  when: (rancher_node_cordon == "cordoned")

- name: Show drain result
  debug:
    var: drain_result
  when: rancher_node_cordon == "drained"

- name: Show uncordon result
  debug:
    var: uncordon_result
  when: rancher_node_cordon == "uncordoned"